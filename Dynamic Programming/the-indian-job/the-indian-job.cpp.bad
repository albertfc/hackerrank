/* Copyright (C) 2019 Albert Farres - All Rights Reserved
 * You may use, distribute and modify this code under the terms of the MIT
 * license, which unfortunately won't be written for another century.
 *
 * You should have received a copy of the MIT license with this file. If not,
 * please write to: albertfc@gmail.com.
 */
#include <bits/stdc++.h>
using namespace std;

#include <stdio.h>
#ifndef SOURCE_PATH_SIZE
#define SOURCE_PATH_SIZE 0
#endif
#define __FILENAME__ (__FILE__ + SOURCE_PATH_SIZE)

#ifndef NDEBUG
#define DBG(msg, args...) \
	do { \
		fprintf( stdout, "DEBUG %s:%d -- " msg, __FILENAME__, __LINE__, ##args ); \
		fflush( stdout ); \
	} while( 0 );
#else
#define DBG(msg, args...)
#endif

vector<string> split_string(string);

vector<int> a1, a2;

pair<int,int> minimize_sum_rec( int i, const vector<int> & arr ){
	if( i == 0 ) {
		a1.push_back( arr[0] );
		return make_pair( arr[0], 0 );
	}

	auto res = minimize_sum_rec( i-1, arr );
	if( res.first > res.second ) {
		a2.push_back( arr[i] );
		return make_pair( res.first, res.second+arr[i] );
	} else {
		a1.push_back( arr[i] );
		return make_pair( res.first+arr[i], res.second );
	}
}

pair<int,int> minimize_sum_rec( list<int> & arr ){
	if( arr.size() == 1 ) {
		a1.push_back( arr.back() );
		return make_pair( arr.back(), 0 );
	}

	int curr = arr.back();
	arr.pop_back();
	auto res = minimize_sum_rec( arr );
	if( res.first > res.second ) {
		a2.push_back( curr );
		return make_pair( res.first, res.second+curr );
	} else {
		a1.push_back( curr );
		return make_pair( res.first+curr, res.second );
	}
}

/*
 * Complete the indianJob function below.
 */
string indianJob(int g, vector<int> arr) {
    /*
     * Write your code here.
     */
	// sort ascending
	list<int> l( arr.begin(), arr.end() );
	l.sort( std::greater<int>() );
	// remove equal pairs
	auto it      = l.begin();
	auto prev_it = it++;
	while( it != l.end() ) {
		if( *prev_it == *it ) {
			g -= *it;
			l.erase( prev_it-- , ++it );
		} else {
			prev_it = it++;
		}
	}
#ifndef NDEBUG
	DBG( "list: " );
	for (auto i : l) {
		cout << i << " ";
	}
	cout << endl;
#endif

	//vector<int> arr1( l.begin(), l.end() );
#if 0
	DBG( "arr1: " );
	for (auto i : arr1) {
		cout << i << " ";
	}
	cout << endl;
#endif
	
	//auto res = minimize_sum_rec( arr1.size()-1, arr1 );
	auto res = minimize_sum_rec( l );
	DBG( "g= %d, sum1 = %d, sum2 = %d\n", g, res.first, res.second );
#ifndef NDEBUG
	DBG( "set1: " );
	for (auto i : a1) {
		cout << i << " ";
	}
	cout << endl;
	DBG( "set2: " );
	for (auto i : a2) {
		cout << i << " ";
	}
	cout << endl;
#endif
	if( res.first <= g && res.second <= g )
		return "YES";
	else
		return "NO";
}

// dup2 & open
#include <fcntl.h>
#include <unistd.h>
int main( int argc, char *argv[] ) {
	if( argc > 1 )
		dup2(open(argv[1], 0), 0);

    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string ng_temp;
        getline(cin, ng_temp);

        vector<string> ng = split_string(ng_temp);

        int n = stoi(ng[0]);

        int g = stoi(ng[1]);

        string arr_temp_temp;
        getline(cin, arr_temp_temp);

        vector<string> arr_temp = split_string(arr_temp_temp);

        vector<int> arr(n);

        for (int arr_itr = 0; arr_itr < n; arr_itr++) {
            int arr_item = stoi(arr_temp[arr_itr]);

            arr[arr_itr] = arr_item;
        }

        string result = indianJob(g,arr);

        cout << result << "\n";
    }

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
